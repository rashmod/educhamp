/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as GoogleImport } from './routes/google'
import { Route as AuthImport } from './routes/_auth'
import { Route as TestIndexImport } from './routes/test/index'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as TestWarningImport } from './routes/test/warning'
import { Route as TestReportTestIdImport } from './routes/test/report.$testId'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const GoogleRoute = GoogleImport.update({
  id: '/google',
  path: '/google',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const TestIndexRoute = TestIndexImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const TestWarningRoute = TestWarningImport.update({
  id: '/test/warning',
  path: '/test/warning',
  getParentRoute: () => rootRoute,
} as any)

const TestReportTestIdRoute = TestReportTestIdImport.update({
  id: '/test/report/$testId',
  path: '/test/report/$testId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/google': {
      id: '/google'
      path: '/google'
      fullPath: '/google'
      preLoaderRoute: typeof GoogleImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/test/warning': {
      id: '/test/warning'
      path: '/test/warning'
      fullPath: '/test/warning'
      preLoaderRoute: typeof TestWarningImport
      parentRoute: typeof rootRoute
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexImport
      parentRoute: typeof rootRoute
    }
    '/test/report/$testId': {
      id: '/test/report/$testId'
      path: '/test/report/$testId'
      fullPath: '/test/report/$testId'
      preLoaderRoute: typeof TestReportTestIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren
  '/google': typeof GoogleRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/test/warning': typeof TestWarningRoute
  '/': typeof AuthIndexRoute
  '/test': typeof TestIndexRoute
  '/test/report/$testId': typeof TestReportTestIdRoute
}

export interface FileRoutesByTo {
  '/google': typeof GoogleRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/test/warning': typeof TestWarningRoute
  '/': typeof AuthIndexRoute
  '/test': typeof TestIndexRoute
  '/test/report/$testId': typeof TestReportTestIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/google': typeof GoogleRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/test/warning': typeof TestWarningRoute
  '/_auth/': typeof AuthIndexRoute
  '/test/': typeof TestIndexRoute
  '/test/report/$testId': typeof TestReportTestIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/google'
    | '/login'
    | '/register'
    | '/test/warning'
    | '/'
    | '/test'
    | '/test/report/$testId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/google'
    | '/login'
    | '/register'
    | '/test/warning'
    | '/'
    | '/test'
    | '/test/report/$testId'
  id:
    | '__root__'
    | '/_auth'
    | '/google'
    | '/login'
    | '/register'
    | '/test/warning'
    | '/_auth/'
    | '/test/'
    | '/test/report/$testId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  GoogleRoute: typeof GoogleRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  TestWarningRoute: typeof TestWarningRoute
  TestIndexRoute: typeof TestIndexRoute
  TestReportTestIdRoute: typeof TestReportTestIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  GoogleRoute: GoogleRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  TestWarningRoute: TestWarningRoute,
  TestIndexRoute: TestIndexRoute,
  TestReportTestIdRoute: TestReportTestIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/google",
        "/login",
        "/register",
        "/test/warning",
        "/test/",
        "/test/report/$testId"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/"
      ]
    },
    "/google": {
      "filePath": "google.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/test/warning": {
      "filePath": "test/warning.tsx"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/test/": {
      "filePath": "test/index.tsx"
    },
    "/test/report/$testId": {
      "filePath": "test/report.$testId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
